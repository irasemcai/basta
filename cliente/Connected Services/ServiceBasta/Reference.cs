//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cliente.ServiceBasta {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClienteUsuario", Namespace="http://schemas.datacontract.org/2004/07/juegoBasta.Domain")]
    [System.SerializableAttribute()]
    public partial class ClienteUsuario : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nombreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nombre {
            get {
                return this.nombreField;
            }
            set {
                if ((object.ReferenceEquals(this.nombreField, value) != true)) {
                    this.nombreField = value;
                    this.RaisePropertyChanged("nombre");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceBasta.IServiceLogin", CallbackContract=typeof(cliente.ServiceBasta.IServiceLoginCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServiceLogin {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceLogin/registrarUsuario")]
        void registrarUsuario(string Nombre, string Contrasena, string CorreoElectronico);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceLogin/registrarUsuario")]
        System.Threading.Tasks.Task registrarUsuarioAsync(string Nombre, string Contrasena, string CorreoElectronico);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogin/iniciarSesion", ReplyAction="http://tempuri.org/IServiceLogin/iniciarSesionResponse")]
        bool iniciarSesion(string Nombre, string Contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogin/iniciarSesion", ReplyAction="http://tempuri.org/IServiceLogin/iniciarSesionResponse")]
        System.Threading.Tasks.Task<bool> iniciarSesionAsync(string Nombre, string Contrasena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogin/verificarCodigoRegistro", ReplyAction="http://tempuri.org/IServiceLogin/verificarCodigoRegistroResponse")]
        cliente.ServiceBasta.ClienteUsuario verificarCodigoRegistro(int Codigo, string cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogin/verificarCodigoRegistro", ReplyAction="http://tempuri.org/IServiceLogin/verificarCodigoRegistroResponse")]
        System.Threading.Tasks.Task<cliente.ServiceBasta.ClienteUsuario> verificarCodigoRegistroAsync(int Codigo, string cliente);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLoginCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceLogin/enviarNotificacionANuevoUsuario")]
        void enviarNotificacionANuevoUsuario(string notificacion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceLogin/enviarUsuarioRegistrado")]
        void enviarUsuarioRegistrado(cliente.ServiceBasta.ClienteUsuario clienteUsuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLoginChannel : cliente.ServiceBasta.IServiceLogin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLoginClient : System.ServiceModel.DuplexClientBase<cliente.ServiceBasta.IServiceLogin>, cliente.ServiceBasta.IServiceLogin {
        
        public ServiceLoginClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceLoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceLoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoginClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoginClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void registrarUsuario(string Nombre, string Contrasena, string CorreoElectronico) {
            base.Channel.registrarUsuario(Nombre, Contrasena, CorreoElectronico);
        }
        
        public System.Threading.Tasks.Task registrarUsuarioAsync(string Nombre, string Contrasena, string CorreoElectronico) {
            return base.Channel.registrarUsuarioAsync(Nombre, Contrasena, CorreoElectronico);
        }
        
        public bool iniciarSesion(string Nombre, string Contrasena) {
            return base.Channel.iniciarSesion(Nombre, Contrasena);
        }
        
        public System.Threading.Tasks.Task<bool> iniciarSesionAsync(string Nombre, string Contrasena) {
            return base.Channel.iniciarSesionAsync(Nombre, Contrasena);
        }
        
        public cliente.ServiceBasta.ClienteUsuario verificarCodigoRegistro(int Codigo, string cliente) {
            return base.Channel.verificarCodigoRegistro(Codigo, cliente);
        }
        
        public System.Threading.Tasks.Task<cliente.ServiceBasta.ClienteUsuario> verificarCodigoRegistroAsync(int Codigo, string cliente) {
            return base.Channel.verificarCodigoRegistroAsync(Codigo, cliente);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceBasta.IServiceBastaSala", CallbackContract=typeof(cliente.ServiceBasta.IServiceBastaSalaCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IServiceBastaSala {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/crearSalaEspera")]
        void crearSalaEspera(cliente.ServiceBasta.ClienteUsuario cliente);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/crearSalaEspera")]
        System.Threading.Tasks.Task crearSalaEsperaAsync(cliente.ServiceBasta.ClienteUsuario cliente);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/unirseASala")]
        void unirseASala(cliente.ServiceBasta.ClienteUsuario cliente);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/unirseASala")]
        System.Threading.Tasks.Task unirseASalaAsync(cliente.ServiceBasta.ClienteUsuario cliente);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBastaSala/mostrarClientesConectados", ReplyAction="http://tempuri.org/IServiceBastaSala/mostrarClientesConectadosResponse")]
        cliente.ServiceBasta.ClienteUsuario[] mostrarClientesConectados();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBastaSala/mostrarClientesConectados", ReplyAction="http://tempuri.org/IServiceBastaSala/mostrarClientesConectadosResponse")]
        System.Threading.Tasks.Task<cliente.ServiceBasta.ClienteUsuario[]> mostrarClientesConectadosAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaSalaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/ActualizarClientes")]
        void ActualizarClientes(cliente.ServiceBasta.ClienteUsuario[] clientes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaSalaChannel : cliente.ServiceBasta.IServiceBastaSala, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBastaSalaClient : System.ServiceModel.DuplexClientBase<cliente.ServiceBasta.IServiceBastaSala>, cliente.ServiceBasta.IServiceBastaSala {
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void crearSalaEspera(cliente.ServiceBasta.ClienteUsuario cliente) {
            base.Channel.crearSalaEspera(cliente);
        }
        
        public System.Threading.Tasks.Task crearSalaEsperaAsync(cliente.ServiceBasta.ClienteUsuario cliente) {
            return base.Channel.crearSalaEsperaAsync(cliente);
        }
        
        public void unirseASala(cliente.ServiceBasta.ClienteUsuario cliente) {
            base.Channel.unirseASala(cliente);
        }
        
        public System.Threading.Tasks.Task unirseASalaAsync(cliente.ServiceBasta.ClienteUsuario cliente) {
            return base.Channel.unirseASalaAsync(cliente);
        }
        
        public cliente.ServiceBasta.ClienteUsuario[] mostrarClientesConectados() {
            return base.Channel.mostrarClientesConectados();
        }
        
        public System.Threading.Tasks.Task<cliente.ServiceBasta.ClienteUsuario[]> mostrarClientesConectadosAsync() {
            return base.Channel.mostrarClientesConectadosAsync();
        }
    }
}
