//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cliente.ServiceBasta {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceBasta.IServiceBasta", CallbackContract=typeof(cliente.ServiceBasta.IServiceBastaCallback))]
    public interface IServiceBasta {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/PruebaConeccion")]
        void PruebaConeccion(int valor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/PruebaConeccion")]
        System.Threading.Tasks.Task PruebaConeccionAsync(int valor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/AgregarUsuario")]
        void AgregarUsuario(string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/AgregarUsuario")]
        System.Threading.Tasks.Task AgregarUsuarioAsync(string name, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/IniciarSesion")]
        void IniciarSesion(string nombre, string contrasena);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/IniciarSesion")]
        System.Threading.Tasks.Task IniciarSesionAsync(string nombre, string contrasena);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/ContestarPrueba")]
        void ContestarPrueba(int valor);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/NotificarUsuarioAgregado")]
        void NotificarUsuarioAgregado(int resultado, string resultadoCorreo);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBasta/NotificarSesionIniciada")]
        void NotificarSesionIniciada(bool resultado);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaChannel : cliente.ServiceBasta.IServiceBasta, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBastaClient : System.ServiceModel.DuplexClientBase<cliente.ServiceBasta.IServiceBasta>, cliente.ServiceBasta.IServiceBasta {
        
        public ServiceBastaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceBastaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceBastaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void PruebaConeccion(int valor) {
            base.Channel.PruebaConeccion(valor);
        }
        
        public System.Threading.Tasks.Task PruebaConeccionAsync(int valor) {
            return base.Channel.PruebaConeccionAsync(valor);
        }
        
        public void AgregarUsuario(string name, string password, string email) {
            base.Channel.AgregarUsuario(name, password, email);
        }
        
        public System.Threading.Tasks.Task AgregarUsuarioAsync(string name, string password, string email) {
            return base.Channel.AgregarUsuarioAsync(name, password, email);
        }
        
        public void IniciarSesion(string nombre, string contrasena) {
            base.Channel.IniciarSesion(nombre, contrasena);
        }
        
        public System.Threading.Tasks.Task IniciarSesionAsync(string nombre, string contrasena) {
            return base.Channel.IniciarSesionAsync(nombre, contrasena);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceBasta.IServiceBastaSala", CallbackContract=typeof(cliente.ServiceBasta.IServiceBastaSalaCallback))]
    public interface IServiceBastaSala {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/CrearSalaEspera")]
        void CrearSalaEspera(string nombre, int limiteParticipantes, string anfitrion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/CrearSalaEspera")]
        System.Threading.Tasks.Task CrearSalaEsperaAsync(string nombre, int limiteParticipantes, string anfitrion);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/UnirseASala")]
        void UnirseASala();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/UnirseASala")]
        System.Threading.Tasks.Task UnirseASalaAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaSalaCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/NotificarUsuarioEnSalaEspera")]
        void NotificarUsuarioEnSalaEspera(string nombreUsuario, bool resultado);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceBastaSala/ImprimirUsuarioAgregadoSala")]
        void ImprimirUsuarioAgregadoSala(string nombreUsuario);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceBastaSalaChannel : cliente.ServiceBasta.IServiceBastaSala, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceBastaSalaClient : System.ServiceModel.DuplexClientBase<cliente.ServiceBasta.IServiceBastaSala>, cliente.ServiceBasta.IServiceBastaSala {
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBastaSalaClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CrearSalaEspera(string nombre, int limiteParticipantes, string anfitrion) {
            base.Channel.CrearSalaEspera(nombre, limiteParticipantes, anfitrion);
        }
        
        public System.Threading.Tasks.Task CrearSalaEsperaAsync(string nombre, int limiteParticipantes, string anfitrion) {
            return base.Channel.CrearSalaEsperaAsync(nombre, limiteParticipantes, anfitrion);
        }
        
        public void UnirseASala() {
            base.Channel.UnirseASala();
        }
        
        public System.Threading.Tasks.Task UnirseASalaAsync() {
            return base.Channel.UnirseASalaAsync();
        }
    }
}
